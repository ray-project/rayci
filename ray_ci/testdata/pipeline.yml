#ci:group=build

- label: ":book: Lint"
  commands:
    - export LINT=1
    - ./ci/env/install-dependencies.sh
    - ./ci/ci.sh lint

- label: ":ferris_wheel: Wheels and Jars"
  conditions:
    [
        "RAY_CI_LINUX_WHEELS_AFFECTED",
        "RAY_CI_JAVA_AFFECTED",
    ]
  instance_size: medium
  commands:
    # Build the wheels and jars
    - UPLOAD_WHEELS_AS_ARTIFACTS=1 LINUX_WHEELS=1 LINUX_JARS=1 ./ci/ci.sh build
    # Upload the wheels and jars
    # We don't want to push on PRs, in fact, the copy_files will fail because unauthenticated.
    - if [ "$BUILDKITE_PULL_REQUEST" != "false" ]; then exit 0; fi
    - pip install -q docker aws_requests_auth boto3
    - ./ci/env/env_info.sh
    # Upload to branch directory.
    - python .buildkite/copy_files.py --destination branch_wheels --path ./.whl
    - python .buildkite/copy_files.py --destination branch_jars --path ./.jar/linux
    # Upload to latest directory.
    - if [ "$BUILDKITE_BRANCH" == "master" ]; then python .buildkite/copy_files.py --destination wheels --path ./.whl; fi
    - if [ "$BUILDKITE_BRANCH" == "master" ]; then python .buildkite/copy_files.py --destination jars --path ./.jar/linux; fi

# Test to see if Train can be used without torch, tf, etc. installed
- label: ":steam_locomotive: Train minimal install"
  conditions: ["RAY_CI_TRAIN_AFFECTED"]
  instance_size: small
  commands:
      - cleanup() { if [ "${BUILDKITE_PULL_REQUEST}" = "false" ]; then ./ci/build/upload_build_info.sh; fi }; trap cleanup EXIT
      - TRAIN_MINIMAL_INSTALL=1 ./ci/env/install-minimal.sh
      - ./ci/env/env_info.sh
      - python ./ci/env/check_minimal_install.py
      - bazel test --config=ci $(./ci/run/bazel_export_options)  --build_tests_only --test_tag_filters=minimal python/ray/train/...

